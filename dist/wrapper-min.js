class IndexedDBWrapper{constructor(t,e,r=1){this.databaseName=t,this.dbVersion=r,this.stores=e,this.isInitialized=!0}async openDatabase(){return new Promise((t,e)=>{let r=indexedDB.open(this.databaseName,this.dbVersion);r.onerror=function(t){e("Database error: "+t.target.errorCode)},r.onsuccess=function(e){t(e.target.result)},r.onupgradeneeded=t=>{let e=t.target.result;this.stores.forEach(t=>{e.createObjectStore(t.name,{keyPath:t.key})})}})}async addData(t,e){try{let r=(await this.openDatabase(e)).transaction([e],"readwrite").objectStore(e);await new Promise((e,a)=>{let o=r.add(t);o.onerror=function(t){a("Error adding data: "+t.target.errorCode)},o.onsuccess=function(t){e()}}),console.log("Data added successfully")}catch(a){console.error(a)}}async readData(t,e){try{let r=(await openDatabase(e)).transaction(e,"readonly").objectStore(e),a=await new Promise((e,a)=>{let o=r.get(t);o.onerror=function(t){a("Error reading data: "+t.target.errorCode)},o.onsuccess=function(t){e(t.target.result)}});return console.log("Data: ",a),a}catch(o){console.error(o)}}async updateData(t,e,r){try{let a=(await openDatabase(config,r)).transaction(r,"readwrite").objectStore(r),o=await new Promise((r,o)=>{let n=a.get(t);n.onerror=function(t){o("Error getting data to update: "+t.target.errorCode)},n.onsuccess=function(t){let a=t.target.result;a?(Object.assign(a,e),r(a)):o("Data not found")}});await new Promise((t,e)=>{let r=a.put(o);r.onerror=function(t){e("Error updating data: "+t.target.errorCode)},r.onsuccess=function(e){t()}}),console.log("Data updated successfully")}catch(n){console.error(n)}}async deleteData(t,e){try{let r=(await openDatabase(config,e)).transaction([e],"readwrite").objectStore(e);await new Promise((e,a)=>{let o=r.delete(t);o.onerror=function(t){a("Error deleting data: "+t.target.errorCode)},o.onsuccess=function(t){e()}}),console.log("Data deleted successfully")}catch(a){console.error(a)}}}
